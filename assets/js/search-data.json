{
  
    
        "post0": {
            "title": "Assignment 3",
            "content": "Pandas and plotting exercises . import pandas as pd . . In Week 2, you used a dataset from the CORGIS website. You may have used either the Python, CSV, or JSON data files. . For this assignment, use the CSV file format for the same category of data that you used previously. . broadway_df = pd.read_csv(&#39;broadway.csv&#39;) . broadway_df . Date.Day Date.Full Date.Month Date.Year Show.Name Show.Theatre Show.Type Statistics.Attendance Statistics.Capacity Statistics.Gross Statistics.Gross Potential Statistics.Performances . 0 26 | 8/26/1990 | 8 | 1990 | Tru | Booth | Play | 5500 | 88 | 134456 | 0 | 8 | . 1 24 | 3/24/1991 | 3 | 1991 | Miss Saigon | Broadway | Musical | 1737 | 100 | 100647 | 0 | 0 | . 2 31 | 3/31/1991 | 3 | 1991 | Miss Saigon | Broadway | Musical | 12160 | 100 | 634424 | 0 | 0 | . 3 7 | 4/7/1991 | 4 | 1991 | Miss Saigon | Broadway | Musical | 13921 | 100 | 713353 | 0 | 0 | . 4 14 | 4/14/1991 | 4 | 1991 | Miss Saigon | Broadway | Musical | 10973 | 90 | 573981 | 0 | 4 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 31291 14 | 8/14/2016 | 8 | 2016 | The Humans | Schoenfeld | Play | 7234 | 87 | 603770 | 62 | 8 | . 31292 14 | 8/14/2016 | 8 | 2016 | The Lion King | Minskoff | Musical | 13485 | 99 | 2233894 | 97 | 8 | . 31293 14 | 8/14/2016 | 8 | 2016 | The Phantom Of The Opera | Majestic | Musical | 10966 | 85 | 999632 | 66 | 8 | . 31294 14 | 8/14/2016 | 8 | 2016 | Waitress | Brooks Atkinson | Musical | 8058 | 96 | 990128 | 97 | 8 | . 31295 14 | 8/14/2016 | 8 | 2016 | Wicked | Gershwin | Musical | 13804 | 95 | 1779664 | 100 | 8 | . 31296 rows × 12 columns . df = broadway_df df.columns . Index([&#39;Date.Day&#39;, &#39;Date.Full&#39;, &#39;Date.Month&#39;, &#39;Date.Year&#39;, &#39;Show.Name&#39;, &#39;Show.Theatre&#39;, &#39;Show.Type&#39;, &#39;Statistics.Attendance&#39;, &#39;Statistics.Capacity&#39;, &#39;Statistics.Gross&#39;, &#39;Statistics.Gross Potential&#39;, &#39;Statistics.Performances&#39;], dtype=&#39;object&#39;) . df.dtypes . Date.Day int64 Date.Full object Date.Month int64 Date.Year int64 Show.Name object Show.Theatre object Show.Type object Statistics.Attendance int64 Statistics.Capacity int64 Statistics.Gross int64 Statistics.Gross Potential int64 Statistics.Performances int64 dtype: object . df.head(2) . Date.Day Date.Full Date.Month Date.Year Show.Name Show.Theatre Show.Type Statistics.Attendance Statistics.Capacity Statistics.Gross Statistics.Gross Potential Statistics.Performances . 0 26 | 8/26/1990 | 8 | 1990 | Tru | Booth | Play | 5500 | 88 | 134456 | 0 | 8 | . 1 24 | 3/24/1991 | 3 | 1991 | Miss Saigon | Broadway | Musical | 1737 | 100 | 100647 | 0 | 0 | . df.tail(2) . Date.Day Date.Full Date.Month Date.Year Show.Name Show.Theatre Show.Type Statistics.Attendance Statistics.Capacity Statistics.Gross Statistics.Gross Potential Statistics.Performances . 31294 14 | 8/14/2016 | 8 | 2016 | Waitress | Brooks Atkinson | Musical | 8058 | 96 | 990128 | 97 | 8 | . 31295 14 | 8/14/2016 | 8 | 2016 | Wicked | Gershwin | Musical | 13804 | 95 | 1779664 | 100 | 8 | . df.describe() . Date.Day Date.Month Date.Year Statistics.Attendance Statistics.Capacity Statistics.Gross Statistics.Gross Potential Statistics.Performances . count 31296.000000 | 31296.000000 | 31296.000000 | 31296.000000 | 31296.000000 | 3.129600e+04 | 31296.000000 | 31296.000000 | . mean 15.720859 | 6.509043 | 2005.875128 | 8010.523006 | 80.738912 | 5.960688e+05 | 62.404045 | 7.224821 | . std 8.817000 | 3.430321 | 6.100118 | 3189.873933 | 18.842815 | 3.809796e+05 | 28.714589 | 2.235376 | . min 1.000000 | 1.000000 | 1990.000000 | 24.000000 | 10.000000 | 1.037000e+03 | 0.000000 | 0.000000 | . 25% 8.000000 | 4.000000 | 2001.000000 | 5508.000000 | 70.000000 | 3.201085e+05 | 45.000000 | 8.000000 | . 50% 16.000000 | 6.000000 | 2006.000000 | 7801.500000 | 83.000000 | 5.145200e+05 | 63.000000 | 8.000000 | . 75% 23.000000 | 10.000000 | 2011.000000 | 10348.000000 | 95.000000 | 7.852690e+05 | 82.000000 | 8.000000 | . max 31.000000 | 12.000000 | 2016.000000 | 21631.000000 | 892.000000 | 3.201333e+06 | 226.000000 | 16.000000 | . df[&#39;Show.Name&#39;] . 0 Tru 1 Miss Saigon 2 Miss Saigon 3 Miss Saigon 4 Miss Saigon ... 31291 The Humans 31292 The Lion King 31293 The Phantom Of The Opera 31294 Waitress 31295 Wicked Name: Show.Name, Length: 31296, dtype: object . df.plot(x=&#39;Show.Name&#39;, y=&#39;Statistics.Attendance&#39;) . &lt;AxesSubplot:xlabel=&#39;Show.Name&#39;&gt; . df.iloc[:9].plot(kind=&#39;bar&#39;, x=&#39;Show.Name&#39;, y=&#39;Statistics.Attendance&#39;) . &lt;AxesSubplot:xlabel=&#39;Show.Name&#39;&gt; . # as well as the matching 10 elements of a different column that has interesting text df.iloc[:9].plot(kind=&#39;bar&#39;, x=&#39;Show.Name&#39;, y=&#39;Statistics.Gross&#39;) . &lt;AxesSubplot:xlabel=&#39;Show.Name&#39;&gt; . # and make a bar plot with the text values horizontally and the numeric values as the bar heights . showname = df.loc[:][&#39;Show.Name&#39;] gross = df.loc[:][&#39;Statistics.Gross&#39;] dict = {&#39;showname&#39;: showname, &#39;gross&#39;: gross} df = pd.DataFrame(dict) . df . showname gross . 0 Tru | 134456 | . 1 Miss Saigon | 100647 | . 2 Miss Saigon | 634424 | . 3 Miss Saigon | 713353 | . 4 Miss Saigon | 573981 | . ... ... | ... | . 31291 The Humans | 603770 | . 31292 The Lion King | 2233894 | . 31293 The Phantom Of The Opera | 999632 | . 31294 Waitress | 990128 | . 31295 Wicked | 1779664 | . 31296 rows × 2 columns . df.iloc[0:19].plot(kind=&#39;bar&#39;, x=&#39;showname&#39;, y=&#39;gross&#39;) . &lt;AxesSubplot:xlabel=&#39;showname&#39;&gt; . df.iloc[0:19].plot(kind=&#39;barh&#39;, x=&#39;showname&#39;,y=&#39;gross&#39;) . &lt;AxesSubplot:ylabel=&#39;showname&#39;&gt; . # and change at least two aesthetic elements (colors, labels, titles, ...) df.iloc[0:19].plot(kind=&#39;bar&#39;, x=&#39;showname&#39;, y=&#39;gross&#39;, figsize=(13,6)) . &lt;AxesSubplot:xlabel=&#39;showname&#39;&gt; . barcolors = [] for i in df[0:19].index: barcolors.append(&#39;red&#39;) print(barcolors) . [&#39;red&#39;] [&#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] [&#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;, &#39;red&#39;] . df.iloc[0:19].plot(kind=&#39;bar&#39;, x=&#39;showname&#39;, y=&#39;gross&#39;, figsize=(13,6), color = barcolors) . &lt;AxesSubplot:xlabel=&#39;showname&#39;&gt; . Free form section . Choose another type of plot that interests you from the pandas.DataFrame.plot documentation [look at the &#39;kind&#39; parameter] and make a new plot of your dataset values using the plot type | . df.iloc[0:19].plot(kind=&#39;scatter&#39;, x=&#39;showname&#39;, y=&#39;gross&#39;, figsize=(13,6), color = barcolors) . &lt;AxesSubplot:xlabel=&#39;showname&#39;, ylabel=&#39;gross&#39;&gt; . Copy some of your analysis from the Week 2 assignment into new cells below | Clean them up if desired, and make sure that you translate them to work with your new pandas dataframe structure here if needed | Create several plots to complement and extend your analysis | . broadway_df = pd.read_csv(&#39;broadway.csv&#39;) . df = broadway_df . print(df[&#39;Show.Theatre&#39;]) . 0 Booth 1 Broadway 2 Broadway 3 Broadway 4 Broadway ... 31291 Schoenfeld 31292 Minskoff 31293 Majestic 31294 Brooks Atkinson 31295 Gershwin Name: Show.Theatre, Length: 31296, dtype: object . # print(str(i[&#39;Show&#39;][&#39;Name&#39;]) , &#39;: &#39; , i[&#39;Statistics&#39;][&#39;Attendance&#39;]) df.iloc[0:19].plot(kind=&#39;bar&#39;, x=&#39;Show.Name&#39;, y=&#39;Statistics.Attendance&#39;) . &lt;AxesSubplot:xlabel=&#39;Show.Name&#39;&gt; . .",
            "url": "https://yandaudrey.github.io/Dh140-blogpost/2022/03/05/Assignment03copy.html",
            "relUrl": "/2022/03/05/Assignment03copy.html",
            "date": " • Mar 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://yandaudrey.github.io/Dh140-blogpost/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://yandaudrey.github.io/Dh140-blogpost/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://yandaudrey.github.io/Dh140-blogpost/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://yandaudrey.github.io/Dh140-blogpost/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}